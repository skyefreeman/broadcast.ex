searchData={"items":[{"type":"module","title":"Bluesky","doc":"Module interface for interacting with the Bluesky API.","ref":"Bluesky.html"},{"type":"module","title":"Bluesky.Facet","doc":"Helper module for interfacing with the Bluesky Facet API:  https://docs.bsky.app/docs/advanced-guides/post-richtext","ref":"Bluesky.Facet.html"},{"type":"function","title":"Bluesky.Facet.facets/1","doc":"Extracts both link and hashtag facets from the given text.\n\nScans the input text for URLs and hashtags, returning their positions along\nwith associated features.","ref":"Bluesky.Facet.html#facets/1"},{"type":"function","title":"Parameters - Bluesky.Facet.facets/1","doc":"- `text`: A string containing the text to scan for links and hashtags.","ref":"Bluesky.Facet.html#facets/1-parameters"},{"type":"function","title":"Examples - Bluesky.Facet.facets/1","doc":"iex> Bluesky.Facet.facets(\"Visit us at https://example.com, and use #elixir\")\n    [\n      %{\n        \"index\" => %{\"byteStart\" => 12, \"byteEnd\" => 31},\n        \"features\" => [%{\"$type\" => \"app.bsky.richtext.facet#link\", \"uri\" => \"https://example.com\"}]\n      },\n      %{\n        \"index\" => %{\"byteStart\" => 41, \"byteEnd\" => 48},\n        \"features\" => [%{\"$type\" => \"app.bsky.richtext.facet#tag\", \"tag\" => \"elixir\"}]\n      }\n    ]","ref":"Bluesky.Facet.html#facets/1-examples"},{"type":"function","title":"Bluesky.Facet.hashtags/1","doc":"Extracts hashtag facets from the given text.\n\nScans the input text for hashtags and returns their positions along with\nassociated features. Hashtags are captured from the '#' until the next \nwhitespace character and are only included if they consist entirely of \nalphanumeric characters and underscores.","ref":"Bluesky.Facet.html#hashtags/1"},{"type":"function","title":"Parameters - Bluesky.Facet.hashtags/1","doc":"- `text`: A string containing the text to scan for hashtags.","ref":"Bluesky.Facet.html#hashtags/1-parameters"},{"type":"function","title":"Examples - Bluesky.Facet.hashtags/1","doc":"iex> Bluesky.Facet.hashtags(\"Check out the #elixir programming language!\")\n    [\n      %{\n        \"index\" => %{\"byteStart\" => 14, \"byteEnd\" => 21},\n        \"features\" => [%{\"$type\" => \"app.bsky.richtext.facet#tag\", \"tag\" => \"elixir\"}]\n      }\n    ]\n    \n    iex> Bluesky.Facet.hashtags(\"Invalid hashtag: #$invalid\")\n    []","ref":"Bluesky.Facet.html#hashtags/1-examples"},{"type":"function","title":"Bluesky.Facet.links/1","doc":"Extracts link facets from the given text.\n\nScans the input text for URLs and returns their positions along with\nassociated features.","ref":"Bluesky.Facet.html#links/1"},{"type":"function","title":"Parameters - Bluesky.Facet.links/1","doc":"- `text`: A string containing the text to scan for links.","ref":"Bluesky.Facet.html#links/1-parameters"},{"type":"function","title":"Examples - Bluesky.Facet.links/1","doc":"iex> Bluesky.Facet.links(\"Visit us at https://example.com.\")\n    [\n      %{\n        \"index\" => %{\"byteStart\" => 12, \"byteEnd\" => 31},\n        \"features\" => [%{\"$type\" => \"app.bsky.richtext.facet#link\", \"uri\" => \"https://example.com\"}]\n      }\n    ]\n    \n    iex> Bluesky.Facet.links(\"Check out https://sub.example.com/path, it's cool!\")\n    [\n      %{\n        \"index\" => %{\"byteStart\" => 10, \"byteEnd\" => 38},\n        \"features\" => [%{\"$type\" => \"app.bsky.richtext.facet#link\", \"uri\" => \"https://sub.example.com/path\"}]\n      }\n    ]","ref":"Bluesky.Facet.html#links/1-examples"},{"type":"module","title":"Broadcast","doc":"Broadcast to multiple social media domains simultaneously through a unified interface.","ref":"Broadcast.html"},{"type":"function","title":"Broadcast.post_all/1","doc":"Posts a given status message to both Mastodon and Bluesky platforms.","ref":"Broadcast.html#post_all/1"},{"type":"function","title":"Parameters - Broadcast.post_all/1","doc":"The function takes a map containing the necessary parameters for posting:\n\n  * `:status` - a string representing the status message to be posted.\n  * `:mastodon_access_token` - the access token for the Mastodon account for authentication.\n  * `:bluesky_handle` - the handle (username) of the Bluesky account to post the status.\n  * `:bluesky_password` - the password for the Bluesky account for authentication.\n  * `:media_paths` - Optional. A list of file paths to images to be uploaded with the status.\n  * `:mastodon_reply_id` - Optional. The ID of a Mastodon post to reply to.\n  * `:bluesky_reply` - Optional. A map containing details of a Bluesky post to reply to:\n    * `:root` - A map with `:uri` and `:cid` of the root (original) post in the thread.\n    * `:parent` - A map with `:uri` and `:cid` of the parent post to reply to directly.","ref":"Broadcast.html#post_all/1-parameters"},{"type":"function","title":"Examples - Broadcast.post_all/1","doc":"iex> Broadcast.post_all(%{\n  ...>   status: \"Hello World!\",\n  ...>   mastodon_access_token: \"your_mastodon_token\",\n  ...>   bluesky_handle: \"your_bluesky_handle\",\n  ...>   bluesky_password: \"your_bluesky_password\"\n  ...> })\n  {:ok, [{:ok, \"{\"id\": \"123\"}\"}, {:ok, \"{\"uri\": \"at://did:123/post/123\"}\"}]}\n\n  iex> Broadcast.post_all(%{\n  ...>   status: \"Hello World with an image!\",\n  ...>   mastodon_access_token: \"your_mastodon_token\",\n  ...>   bluesky_handle: \"your_bluesky_handle\",\n  ...>   bluesky_password: \"your_bluesky_password\",\n  ...>   media_paths: [\"path/to/image.jpg\"]\n  ...> })\n  {:ok, [{:ok, \"{\"id\": \"123\"}\"}, {:ok, \"{\"uri\": \"at://did:123/post/123\"}\"}]}\n\n  iex> Broadcast.post_all(%{\n  ...>   status: \"This is a reply!\",\n  ...>   mastodon_access_token: \"your_mastodon_token\",\n  ...>   bluesky_handle: \"your_bluesky_handle\",\n  ...>   bluesky_password: \"your_bluesky_password\",\n  ...>   mastodon_reply_id: \"109372843234\",\n  ...>   bluesky_reply: %{\n  ...>     root: %{uri: \"at://did:123/app.bsky.feed.post/1234\", cid: \"bafyreic...\"},\n  ...>     parent: %{uri: \"at://did:123/app.bsky.feed.post/1234\", cid: \"bafyreic...\"}\n  ...>   }\n  ...> })\n  {:ok, [{:ok, \"{\"id\": \"123\"}\"}, {:ok, \"{\"uri\": \"at://did:123/post/456\"}\"}]}","ref":"Broadcast.html#post_all/1-examples"},{"type":"function","title":"Broadcast.post_bluesky_status/5","doc":"Posts a status update to the Bluesky social network.","ref":"Broadcast.html#post_bluesky_status/5"},{"type":"function","title":"Parameters - Broadcast.post_bluesky_status/5","doc":"* `handle`: a string representing the user identifier on the Bluesky platform.\n  * `password`: a string containing the user password for authentication.\n  * `status`: a string representing the status update to be posted.\n  * `media_paths`: Optional list of file paths to images to be uploaded with the status. Defaults to an empty list.\n  * `reply`: Optional map containing reply information with root and parent posts. Required fields for each:\n    * `root`: Map with `:uri` and `:cid` of the root post in the thread.\n    * `parent`: Map with `:uri` and `:cid` of the parent post to reply to directly.","ref":"Broadcast.html#post_bluesky_status/5-parameters"},{"type":"function","title":"Examples - Broadcast.post_bluesky_status/5","doc":"iex> Broadcast.post_bluesky_status(\"your_user_handle\", \"your_password\", \"Hello, Bluesky!\")\n  {:ok, \"{\"uri\": \"at://did:123/post/123\"}\"}\n\n  iex> Broadcast.post_bluesky_status(\"your_user_handle\", \"your_password\", \"Hello with image!\", [\"path/to/image.jpg\"])\n  {:ok, \"{\"uri\": \"at://did:123/post/123\"}\"}\n  \n  iex> reply_info = %{\n  ...>   root: %{uri: \"at://did:123/app.bsky.feed.post/1234\", cid: \"bafyreic...\"},\n  ...>   parent: %{uri: \"at://did:123/app.bsky.feed.post/1234\", cid: \"bafyreic...\"}\n  ...> }\n  iex> Broadcast.post_bluesky_status(\"your_user_handle\", \"your_password\", \"This is a reply!\", [], reply_info)\n  {:ok, \"{\"uri\": \"at://did:123/post/456\"}\"}","ref":"Broadcast.html#post_bluesky_status/5-examples"},{"type":"function","title":"Broadcast.post_mastodon_status/4","doc":"Posts a status update to the Mastodon social media platform.","ref":"Broadcast.html#post_mastodon_status/4"},{"type":"function","title":"Parameters - Broadcast.post_mastodon_status/4","doc":"* `access_token` - The bearer token used for authentication with the Mastodon API.\n  * `status` - The string representing the status update to be posted.\n  * `media_paths` - Optional list of file paths to images to be uploaded with the status.\n  * `in_reply_to_id` - Optional ID of a status to reply to.","ref":"Broadcast.html#post_mastodon_status/4-parameters"},{"type":"function","title":"Examples - Broadcast.post_mastodon_status/4","doc":"iex> Broadcast.post_mastodon_status(\"your_access_token\", \"Hello, Mastodon!\")\n  {:ok, \"{\"id\": \"123\"}\"}\n\n  iex> Broadcast.post_mastodon_status(\"your_access_token\", \"Hello, Mastodon!\", [\"path/to/image.jpg\"])\n  {:ok, \"{\"id\": \"123\"}\"}\n  \n  iex> Broadcast.post_mastodon_status(\"your_access_token\", \"This is a reply!\", [], \"109372843234\")\n  {:ok, \"{\"id\": \"123\"}\"}","ref":"Broadcast.html#post_mastodon_status/4-examples"},{"type":"extras","title":"README","doc":"[![Hex Version](https://img.shields.io/hexpm/v/broadcast)](https://hex.pm/packages/broadcast) [![Hex Docs](https://img.shields.io/badge/docs-hexpm-blue.svg)](https://hexdocs.pm/broadcast/)\n\n\n# Broadcast \n\nBroadcast is an Elixir library for posting to social media websites, currently with support for Bluesky and Mastodon.","ref":"readme.html"},{"type":"extras","title":"Features - README","doc":"- Post to multiple social media platforms with a single function call\n- Support for both Mastodon and Bluesky platforms\n- Image attachment support (multiple images per post)\n- Reply to existing posts\n- Hashtag detection and formatting for Bluesky\n- Link detection and formatting for Bluesky","ref":"readme.html#features"},{"type":"extras","title":"Installation - README","doc":"Add `broadcast` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:broadcast, \"~> 0.2.0\"}\n  ]\nend\n```\n\nThen run `mix deps.get` to install dependencies. Broadcast requires Elixir 1.17 or later.","ref":"readme.html#installation"},{"type":"extras","title":"Usage - README","doc":"","ref":"readme.html#usage"},{"type":"extras","title":"Post to Multiple Platforms - README","doc":"Post to Bluesky and Mastodon simultaneously with `post_all/1`:\n\n```elixir\n{:ok, results} = Broadcast.post_all(\n  %{\n    status: \"Hello, world!\",\n    mastodon_access_token: \"your_mastodon_access_token\",\n    bluesky_handle: \"your_bluesky_handle\",\n    bluesky_password: \"your_bluesky_password\"\n  }\n)\n```","ref":"readme.html#post-to-multiple-platforms"},{"type":"extras","title":"Post with Media - README","doc":"Add media attachments to your posts with the `media_paths` parameter:\n\n```elixir\n{:ok, results} = Broadcast.post_all(\n  %{\n    status: \"Check out this image!\",\n    mastodon_access_token: \"your_mastodon_access_token\",\n    bluesky_handle: \"your_bluesky_handle\",\n    bluesky_password: \"your_bluesky_password\",\n    media_paths: [\"path/to/image.jpg\", \"path/to/another.png\"]\n  }\n)\n```","ref":"readme.html#post-with-media"},{"type":"extras","title":"Post Replies - README","doc":"Reply to existing posts on both platforms simultaneously:\n\n```elixir\n{:ok, results} = Broadcast.post_all(\n  %{\n    status: \"This is my reply!\",\n    mastodon_access_token: \"your_mastodon_access_token\",\n    bluesky_handle: \"your_bluesky_handle\",\n    bluesky_password: \"your_bluesky_password\",\n    mastodon_reply_id: \"109372843234\", # ID of the Mastodon post to reply to\n    bluesky_reply: %{\n      # Both root and parent are required for Bluesky replies\n      root: %{uri: \"at://did:123/app.bsky.feed.post/original\", cid: \"bafyreihg6tz\"},\n      parent: %{uri: \"at://did:123/app.bsky.feed.post/parent\", cid: \"bafyreiabc123\"}\n    }\n  }\n)\n```","ref":"readme.html#post-replies"},{"type":"extras","title":"Platform-Specific Functions - README","doc":"#### Mastodon\n\nPost to Mastodon only:\n\n```elixir\n{:ok, result} = Broadcast.post_mastodon_status(\n  \"mastodon_access_token\",\n  \"Hello world!\"\n)\n```\n\nReply to a Mastodon post:\n\n```elixir\n{:ok, result} = Broadcast.post_mastodon_status(\n  \"mastodon_access_token\",\n  \"This is a reply!\",\n  [], # Optional media paths\n  \"109372843234\" # ID of the post to reply to\n)\n```\n\n#### Bluesky\n\nPost to Bluesky only:\n\n```elixir\n{:ok, result} = Broadcast.post_bluesky_status(\n  \"your_bluesky_handle\",\n  \"your_bluesky_password\",\n  \"Hello world!\"\n)\n```\n\nReply to a Bluesky post:\n\n```elixir\nreply_info = %{\n  root: %{uri: \"at://did:123/app.bsky.feed.post/original\", cid: \"bafyreihg6tz\"},\n  parent: %{uri: \"at://did:123/app.bsky.feed.post/parent\", cid: \"bafyreiabc123\"}\n}\n\n{:ok, result} = Broadcast.post_bluesky_status(\n  \"your_bluesky_handle\",\n  \"your_bluesky_password\",\n  \"This is a reply!\",\n  [], # Optional media paths\n  reply_info\n)\n```","ref":"readme.html#platform-specific-functions"},{"type":"extras","title":"License - README","doc":"Broadcast's source code is released under the [MIT License](https://github.com/skyefreeman/broadcast.ex/blob/main/LICENSE).","ref":"readme.html#license"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.36.1"}}